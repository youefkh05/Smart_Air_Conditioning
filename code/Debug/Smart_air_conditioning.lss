
Smart_air_conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  000029da  00002a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000b6  008000b6  00002ac4  2**0
                  ALLOC
  3 .stab         00002760  00000000  00000000  00002ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e47  00000000  00000000  00005224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000606b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000631b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 14 	call	0x28a2	; 0x28a2 <main>
      8a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzeron>:
#include "gpio.h"
#include "keypad.h"
const uint8 pass[passnum]={1,2,3,4};
volatile boolean isrFlag = 0;

void buzzeron(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 GPIO_setupPinDirection(buzzerport, buzzerpin, 1);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	  GPIO_writePin(buzzerport, buzzerpin, 1);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzeroff>:

void buzzeroff(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	 GPIO_setupPinDirection(buzzerport, buzzerpin, 1);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	  GPIO_writePin(buzzerport, buzzerpin, 0);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <redon>:

void redon(void){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(redport, redpin, 1);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	66 e0       	ldi	r22, 0x06	; 6
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		  GPIO_writePin(redport, redpin, 1);
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	66 e0       	ldi	r22, 0x06	; 6
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
}
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <redoff>:

void redoff(void){
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(redport, redpin, 1);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		  GPIO_writePin(redport, redpin, 0);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	66 e0       	ldi	r22, 0x06	; 6
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <greenon>:

void greenon(void){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(greenport, greenpin, 1);
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	67 e0       	ldi	r22, 0x07	; 7
     bda:	41 e0       	ldi	r20, 0x01	; 1
     bdc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		  GPIO_writePin(greenport, greenpin, 1);
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	67 e0       	ldi	r22, 0x07	; 7
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
}
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <greenoff>:

void greenoff(void){
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(greenport, greenpin, 1);
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	67 e0       	ldi	r22, 0x07	; 7
     bfc:	41 e0       	ldi	r20, 0x01	; 1
     bfe:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		  GPIO_writePin(greenport, greenpin, 0);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	67 e0       	ldi	r22, 0x07	; 7
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <checkpass>:

uint8 checkpass(void){
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	67 97       	sbiw	r28, 0x17	; 23
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
	uint8 a[passnum];
	//get the pass from keypad
	for(int i=0;i<passnum;i++){
     c2a:	1a 8a       	std	Y+18, r1	; 0x12
     c2c:	19 8a       	std	Y+17, r1	; 0x11
     c2e:	bb c0       	rjmp	.+374    	; 0xda6 <checkpass+0x194>
		a[i]=KEYPAD_getPressedKey();
     c30:	09 89       	ldd	r16, Y+17	; 0x11
     c32:	1a 89       	ldd	r17, Y+18	; 0x12
     c34:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <KEYPAD_getPressedKey>
     c38:	28 2f       	mov	r18, r24
     c3a:	ce 01       	movw	r24, r28
     c3c:	43 96       	adiw	r24, 0x13	; 19
     c3e:	fc 01       	movw	r30, r24
     c40:	e0 0f       	add	r30, r16
     c42:	f1 1f       	adc	r31, r17
     c44:	20 83       	st	Z, r18
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e2       	ldi	r26, 0x20	; 32
     c4c:	b1 e4       	ldi	r27, 0x41	; 65
     c4e:	8b 87       	std	Y+11, r24	; 0x0b
     c50:	9c 87       	std	Y+12, r25	; 0x0c
     c52:	ad 87       	std	Y+13, r26	; 0x0d
     c54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c56:	6b 85       	ldd	r22, Y+11	; 0x0b
     c58:	7c 85       	ldd	r23, Y+12	; 0x0c
     c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	4a e7       	ldi	r20, 0x7A	; 122
     c64:	53 e4       	ldi	r21, 0x43	; 67
     c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	8f 83       	std	Y+7, r24	; 0x07
     c70:	98 87       	std	Y+8, r25	; 0x08
     c72:	a9 87       	std	Y+9, r26	; 0x09
     c74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c76:	6f 81       	ldd	r22, Y+7	; 0x07
     c78:	78 85       	ldd	r23, Y+8	; 0x08
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
     c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e8       	ldi	r20, 0x80	; 128
     c84:	5f e3       	ldi	r21, 0x3F	; 63
     c86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c8a:	88 23       	and	r24, r24
     c8c:	2c f4       	brge	.+10     	; 0xc98 <checkpass+0x86>
		__ticks = 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9e 83       	std	Y+6, r25	; 0x06
     c94:	8d 83       	std	Y+5, r24	; 0x05
     c96:	3f c0       	rjmp	.+126    	; 0xd16 <checkpass+0x104>
	else if (__tmp > 65535)
     c98:	6f 81       	ldd	r22, Y+7	; 0x07
     c9a:	78 85       	ldd	r23, Y+8	; 0x08
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	3f ef       	ldi	r19, 0xFF	; 255
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	57 e4       	ldi	r21, 0x47	; 71
     ca8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cac:	18 16       	cp	r1, r24
     cae:	4c f5       	brge	.+82     	; 0xd02 <checkpass+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e2       	ldi	r20, 0x20	; 32
     cbe:	51 e4       	ldi	r21, 0x41	; 65
     cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	bc 01       	movw	r22, r24
     cca:	cd 01       	movw	r24, r26
     ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	0f c0       	rjmp	.+30     	; 0xcf8 <checkpass+0xe6>
     cda:	89 e1       	ldi	r24, 0x19	; 25
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <checkpass+0xd4>
     cea:	9c 83       	std	Y+4, r25	; 0x04
     cec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	9e 83       	std	Y+6, r25	; 0x06
     cf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	69 f7       	brne	.-38     	; 0xcda <checkpass+0xc8>
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <checkpass+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <checkpass+0x110>
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	 LCD_moveCursor(1,i);
     d2a:	99 89       	ldd	r25, Y+17	; 0x11
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	69 2f       	mov	r22, r25
     d30:	0e 94 c9 13 	call	0x2792	; 0x2792 <LCD_moveCursor>
	 if(a[i]==35)LCD_displayStringRowColumn(1,i,"#");
     d34:	29 89       	ldd	r18, Y+17	; 0x11
     d36:	3a 89       	ldd	r19, Y+18	; 0x12
     d38:	ce 01       	movw	r24, r28
     d3a:	43 96       	adiw	r24, 0x13	; 19
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 0f       	add	r30, r18
     d40:	f3 1f       	adc	r31, r19
     d42:	80 81       	ld	r24, Z
     d44:	83 32       	cpi	r24, 0x23	; 35
     d46:	49 f4       	brne	.+18     	; 0xd5a <checkpass+0x148>
     d48:	99 89       	ldd	r25, Y+17	; 0x11
     d4a:	20 e6       	ldi	r18, 0x60	; 96
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	69 2f       	mov	r22, r25
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
     d58:	1f c0       	rjmp	.+62     	; 0xd98 <checkpass+0x186>
	 else if(a[i]==42)LCD_displayStringRowColumn(1,i,"*");
     d5a:	29 89       	ldd	r18, Y+17	; 0x11
     d5c:	3a 89       	ldd	r19, Y+18	; 0x12
     d5e:	ce 01       	movw	r24, r28
     d60:	43 96       	adiw	r24, 0x13	; 19
     d62:	fc 01       	movw	r30, r24
     d64:	e2 0f       	add	r30, r18
     d66:	f3 1f       	adc	r31, r19
     d68:	80 81       	ld	r24, Z
     d6a:	8a 32       	cpi	r24, 0x2A	; 42
     d6c:	49 f4       	brne	.+18     	; 0xd80 <checkpass+0x16e>
     d6e:	99 89       	ldd	r25, Y+17	; 0x11
     d70:	22 e6       	ldi	r18, 0x62	; 98
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	69 2f       	mov	r22, r25
     d78:	a9 01       	movw	r20, r18
     d7a:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
     d7e:	0c c0       	rjmp	.+24     	; 0xd98 <checkpass+0x186>
	 else LCD_intgerToString(a[i]);
     d80:	29 89       	ldd	r18, Y+17	; 0x11
     d82:	3a 89       	ldd	r19, Y+18	; 0x12
     d84:	ce 01       	movw	r24, r28
     d86:	43 96       	adiw	r24, 0x13	; 19
     d88:	fc 01       	movw	r30, r24
     d8a:	e2 0f       	add	r30, r18
     d8c:	f3 1f       	adc	r31, r19
     d8e:	80 81       	ld	r24, Z
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 24 14 	call	0x2848	; 0x2848 <LCD_intgerToString>
	  KEYPAD_is_off();//wait for the next input
     d98:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <KEYPAD_is_off>
}

uint8 checkpass(void){
	uint8 a[passnum];
	//get the pass from keypad
	for(int i=0;i<passnum;i++){
     d9c:	89 89       	ldd	r24, Y+17	; 0x11
     d9e:	9a 89       	ldd	r25, Y+18	; 0x12
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9a 8b       	std	Y+18, r25	; 0x12
     da4:	89 8b       	std	Y+17, r24	; 0x11
     da6:	89 89       	ldd	r24, Y+17	; 0x11
     da8:	9a 89       	ldd	r25, Y+18	; 0x12
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	91 05       	cpc	r25, r1
     dae:	0c f4       	brge	.+2      	; 0xdb2 <checkpass+0x1a0>
     db0:	3f cf       	rjmp	.-386    	; 0xc30 <checkpass+0x1e>
	  KEYPAD_is_off();//wait for the next input
	}

	//if the input is right will return 1
	//check if it is the pass
	for(int i=0;i<passnum;i++){
     db2:	18 8a       	std	Y+16, r1	; 0x10
     db4:	1f 86       	std	Y+15, r1	; 0x0f
     db6:	17 c0       	rjmp	.+46     	; 0xde6 <checkpass+0x1d4>
			if(a[i]!=pass[i])return 0;
     db8:	2f 85       	ldd	r18, Y+15	; 0x0f
     dba:	38 89       	ldd	r19, Y+16	; 0x10
     dbc:	ce 01       	movw	r24, r28
     dbe:	43 96       	adiw	r24, 0x13	; 19
     dc0:	fc 01       	movw	r30, r24
     dc2:	e2 0f       	add	r30, r18
     dc4:	f3 1f       	adc	r31, r19
     dc6:	20 81       	ld	r18, Z
     dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dca:	98 89       	ldd	r25, Y+16	; 0x10
     dcc:	fc 01       	movw	r30, r24
     dce:	ee 54       	subi	r30, 0x4E	; 78
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	80 81       	ld	r24, Z
     dd4:	28 17       	cp	r18, r24
     dd6:	11 f0       	breq	.+4      	; 0xddc <checkpass+0x1ca>
     dd8:	1f 8a       	std	Y+23, r1	; 0x17
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <checkpass+0x1e2>
	  KEYPAD_is_off();//wait for the next input
	}

	//if the input is right will return 1
	//check if it is the pass
	for(int i=0;i<passnum;i++){
     ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dde:	98 89       	ldd	r25, Y+16	; 0x10
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	98 8b       	std	Y+16, r25	; 0x10
     de4:	8f 87       	std	Y+15, r24	; 0x0f
     de6:	8f 85       	ldd	r24, Y+15	; 0x0f
     de8:	98 89       	ldd	r25, Y+16	; 0x10
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	91 05       	cpc	r25, r1
     dee:	24 f3       	brlt	.-56     	; 0xdb8 <checkpass+0x1a6>
			if(a[i]!=pass[i])return 0;
		}
	return 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8f 8b       	std	Y+23, r24	; 0x17
     df4:	8f 89       	ldd	r24, Y+23	; 0x17
}
     df6:	67 96       	adiw	r28, 0x17	; 23
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <enterpass>:

void enterpass(void){
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	ad 97       	sbiw	r28, 0x2d	; 45
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     e20:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_init>
	redoff();
     e24:	0e 94 d6 05 	call	0xbac	; 0xbac <redoff>
	buzzeroff();
     e28:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzeroff>
	greenoff();
     e2c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <greenoff>
	LCD_displayStringRowColumn(0,0,"Enter Password");
     e30:	24 e6       	ldi	r18, 0x64	; 100
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	a9 01       	movw	r20, r18
     e3a:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
	uint8 check =0;
     e3e:	1d a6       	std	Y+45, r1	; 0x2d
	check=checkpass();
     e40:	0e 94 09 06 	call	0xc12	; 0xc12 <checkpass>
     e44:	8d a7       	std	Y+45, r24	; 0x2d
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	aa ef       	ldi	r26, 0xFA	; 250
     e4c:	b3 e4       	ldi	r27, 0x43	; 67
     e4e:	8f a3       	std	Y+39, r24	; 0x27
     e50:	98 a7       	std	Y+40, r25	; 0x28
     e52:	a9 a7       	std	Y+41, r26	; 0x29
     e54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e56:	6f a1       	ldd	r22, Y+39	; 0x27
     e58:	78 a5       	ldd	r23, Y+40	; 0x28
     e5a:	89 a5       	ldd	r24, Y+41	; 0x29
     e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4a e7       	ldi	r20, 0x7A	; 122
     e64:	53 e4       	ldi	r21, 0x43	; 67
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8b a3       	std	Y+35, r24	; 0x23
     e70:	9c a3       	std	Y+36, r25	; 0x24
     e72:	ad a3       	std	Y+37, r26	; 0x25
     e74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e76:	6b a1       	ldd	r22, Y+35	; 0x23
     e78:	7c a1       	ldd	r23, Y+36	; 0x24
     e7a:	8d a1       	ldd	r24, Y+37	; 0x25
     e7c:	9e a1       	ldd	r25, Y+38	; 0x26
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <enterpass+0x8c>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a a3       	std	Y+34, r25	; 0x22
     e94:	89 a3       	std	Y+33, r24	; 0x21
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <enterpass+0x10a>
	else if (__tmp > 65535)
     e98:	6b a1       	ldd	r22, Y+35	; 0x23
     e9a:	7c a1       	ldd	r23, Y+36	; 0x24
     e9c:	8d a1       	ldd	r24, Y+37	; 0x25
     e9e:	9e a1       	ldd	r25, Y+38	; 0x26
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eac:	18 16       	cp	r1, r24
     eae:	4c f5       	brge	.+82     	; 0xf02 <enterpass+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	6f a1       	ldd	r22, Y+39	; 0x27
     eb2:	78 a5       	ldd	r23, Y+40	; 0x28
     eb4:	89 a5       	ldd	r24, Y+41	; 0x29
     eb6:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9a a3       	std	Y+34, r25	; 0x22
     ed6:	89 a3       	std	Y+33, r24	; 0x21
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <enterpass+0xec>
     eda:	89 e1       	ldi	r24, 0x19	; 25
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	98 a3       	std	Y+32, r25	; 0x20
     ee0:	8f 8f       	std	Y+31, r24	; 0x1f
     ee2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ee4:	98 a1       	ldd	r25, Y+32	; 0x20
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <enterpass+0xda>
     eea:	98 a3       	std	Y+32, r25	; 0x20
     eec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eee:	89 a1       	ldd	r24, Y+33	; 0x21
     ef0:	9a a1       	ldd	r25, Y+34	; 0x22
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	9a a3       	std	Y+34, r25	; 0x22
     ef6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	89 a1       	ldd	r24, Y+33	; 0x21
     efa:	9a a1       	ldd	r25, Y+34	; 0x22
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	69 f7       	brne	.-38     	; 0xeda <enterpass+0xce>
     f00:	2b c1       	rjmp	.+598    	; 0x1158 <enterpass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f02:	6b a1       	ldd	r22, Y+35	; 0x23
     f04:	7c a1       	ldd	r23, Y+36	; 0x24
     f06:	8d a1       	ldd	r24, Y+37	; 0x25
     f08:	9e a1       	ldd	r25, Y+38	; 0x26
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9a a3       	std	Y+34, r25	; 0x22
     f14:	89 a3       	std	Y+33, r24	; 0x21
     f16:	89 a1       	ldd	r24, Y+33	; 0x21
     f18:	9a a1       	ldd	r25, Y+34	; 0x22
     f1a:	9e 8f       	std	Y+30, r25	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <enterpass+0x116>
     f26:	9e 8f       	std	Y+30, r25	; 0x1e
     f28:	8d 8f       	std	Y+29, r24	; 0x1d
     f2a:	16 c1       	rjmp	.+556    	; 0x1158 <enterpass+0x34c>
	_delay_ms(500);

	while(!check)
{
	 LCD_clearScreen();
     f2c:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_clearScreen>
	 LCD_displayStringRowColumn(0,0,"Wrong Password");
     f30:	23 e7       	ldi	r18, 0x73	; 115
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
	 LCD_displayStringRowColumn(1,0,"Sorry my man :(");
     f3e:	22 e8       	ldi	r18, 0x82	; 130
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	a9 01       	movw	r20, r18
     f48:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
	 redon();
     f4c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <redon>
	 for(int i=0;i<25;i++){
     f50:	1c a6       	std	Y+44, r1	; 0x2c
     f52:	1b a6       	std	Y+43, r1	; 0x2b
     f54:	ed c0       	rjmp	.+474    	; 0x1130 <enterpass+0x324>
		 buzzeron();
     f56:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzeron>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a8 ec       	ldi	r26, 0xC8	; 200
     f60:	b2 e4       	ldi	r27, 0x42	; 66
     f62:	89 8f       	std	Y+25, r24	; 0x19
     f64:	9a 8f       	std	Y+26, r25	; 0x1a
     f66:	ab 8f       	std	Y+27, r26	; 0x1b
     f68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6a:	69 8d       	ldd	r22, Y+25	; 0x19
     f6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	4a e7       	ldi	r20, 0x7A	; 122
     f78:	53 e4       	ldi	r21, 0x43	; 67
     f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	8d 8b       	std	Y+21, r24	; 0x15
     f84:	9e 8b       	std	Y+22, r25	; 0x16
     f86:	af 8b       	std	Y+23, r26	; 0x17
     f88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f8a:	6d 89       	ldd	r22, Y+21	; 0x15
     f8c:	7e 89       	ldd	r23, Y+22	; 0x16
     f8e:	8f 89       	ldd	r24, Y+23	; 0x17
     f90:	98 8d       	ldd	r25, Y+24	; 0x18
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e8       	ldi	r20, 0x80	; 128
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9e:	88 23       	and	r24, r24
     fa0:	2c f4       	brge	.+10     	; 0xfac <enterpass+0x1a0>
		__ticks = 1;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
     fa8:	8b 8b       	std	Y+19, r24	; 0x13
     faa:	3f c0       	rjmp	.+126    	; 0x102a <enterpass+0x21e>
	else if (__tmp > 65535)
     fac:	6d 89       	ldd	r22, Y+21	; 0x15
     fae:	7e 89       	ldd	r23, Y+22	; 0x16
     fb0:	8f 89       	ldd	r24, Y+23	; 0x17
     fb2:	98 8d       	ldd	r25, Y+24	; 0x18
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	57 e4       	ldi	r21, 0x47	; 71
     fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc0:	18 16       	cp	r1, r24
     fc2:	4c f5       	brge	.+82     	; 0x1016 <enterpass+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc4:	69 8d       	ldd	r22, Y+25	; 0x19
     fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e2       	ldi	r20, 0x20	; 32
     fd2:	51 e4       	ldi	r21, 0x41	; 65
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9c 8b       	std	Y+20, r25	; 0x14
     fea:	8b 8b       	std	Y+19, r24	; 0x13
     fec:	0f c0       	rjmp	.+30     	; 0x100c <enterpass+0x200>
     fee:	89 e1       	ldi	r24, 0x19	; 25
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9a 8b       	std	Y+18, r25	; 0x12
     ff4:	89 8b       	std	Y+17, r24	; 0x11
     ff6:	89 89       	ldd	r24, Y+17	; 0x11
     ff8:	9a 89       	ldd	r25, Y+18	; 0x12
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <enterpass+0x1ee>
     ffe:	9a 8b       	std	Y+18, r25	; 0x12
    1000:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1002:	8b 89       	ldd	r24, Y+19	; 0x13
    1004:	9c 89       	ldd	r25, Y+20	; 0x14
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	9c 8b       	std	Y+20, r25	; 0x14
    100a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	8b 89       	ldd	r24, Y+19	; 0x13
    100e:	9c 89       	ldd	r25, Y+20	; 0x14
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	69 f7       	brne	.-38     	; 0xfee <enterpass+0x1e2>
    1014:	14 c0       	rjmp	.+40     	; 0x103e <enterpass+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1016:	6d 89       	ldd	r22, Y+21	; 0x15
    1018:	7e 89       	ldd	r23, Y+22	; 0x16
    101a:	8f 89       	ldd	r24, Y+23	; 0x17
    101c:	98 8d       	ldd	r25, Y+24	; 0x18
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	8b 89       	ldd	r24, Y+19	; 0x13
    102c:	9c 89       	ldd	r25, Y+20	; 0x14
    102e:	98 8b       	std	Y+16, r25	; 0x10
    1030:	8f 87       	std	Y+15, r24	; 0x0f
    1032:	8f 85       	ldd	r24, Y+15	; 0x0f
    1034:	98 89       	ldd	r25, Y+16	; 0x10
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <enterpass+0x22a>
    103a:	98 8b       	std	Y+16, r25	; 0x10
    103c:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(100);
	 buzzeroff();
    103e:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzeroff>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a8 ec       	ldi	r26, 0xC8	; 200
    1048:	b2 e4       	ldi	r27, 0x42	; 66
    104a:	8b 87       	std	Y+11, r24	; 0x0b
    104c:	9c 87       	std	Y+12, r25	; 0x0c
    104e:	ad 87       	std	Y+13, r26	; 0x0d
    1050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1052:	6b 85       	ldd	r22, Y+11	; 0x0b
    1054:	7c 85       	ldd	r23, Y+12	; 0x0c
    1056:	8d 85       	ldd	r24, Y+13	; 0x0d
    1058:	9e 85       	ldd	r25, Y+14	; 0x0e
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	4a e7       	ldi	r20, 0x7A	; 122
    1060:	53 e4       	ldi	r21, 0x43	; 67
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	8f 83       	std	Y+7, r24	; 0x07
    106c:	98 87       	std	Y+8, r25	; 0x08
    106e:	a9 87       	std	Y+9, r26	; 0x09
    1070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e8       	ldi	r20, 0x80	; 128
    1080:	5f e3       	ldi	r21, 0x3F	; 63
    1082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1086:	88 23       	and	r24, r24
    1088:	2c f4       	brge	.+10     	; 0x1094 <enterpass+0x288>
		__ticks = 1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	3f c0       	rjmp	.+126    	; 0x1112 <enterpass+0x306>
	else if (__tmp > 65535)
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	3f ef       	ldi	r19, 0xFF	; 255
    10a0:	4f e7       	ldi	r20, 0x7F	; 127
    10a2:	57 e4       	ldi	r21, 0x47	; 71
    10a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a8:	18 16       	cp	r1, r24
    10aa:	4c f5       	brge	.+82     	; 0x10fe <enterpass+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e2       	ldi	r20, 0x20	; 32
    10ba:	51 e4       	ldi	r21, 0x41	; 65
    10bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	0f c0       	rjmp	.+30     	; 0x10f4 <enterpass+0x2e8>
    10d6:	89 e1       	ldi	r24, 0x19	; 25
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 83       	std	Y+4, r25	; 0x04
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <enterpass+0x2d6>
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	69 f7       	brne	.-38     	; 0x10d6 <enterpass+0x2ca>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <enterpass+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1100:	78 85       	ldd	r23, Y+8	; 0x08
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <enterpass+0x312>
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
{
	 LCD_clearScreen();
	 LCD_displayStringRowColumn(0,0,"Wrong Password");
	 LCD_displayStringRowColumn(1,0,"Sorry my man :(");
	 redon();
	 for(int i=0;i<25;i++){
    1126:	8b a5       	ldd	r24, Y+43	; 0x2b
    1128:	9c a5       	ldd	r25, Y+44	; 0x2c
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	9c a7       	std	Y+44, r25	; 0x2c
    112e:	8b a7       	std	Y+43, r24	; 0x2b
    1130:	8b a5       	ldd	r24, Y+43	; 0x2b
    1132:	9c a5       	ldd	r25, Y+44	; 0x2c
    1134:	89 31       	cpi	r24, 0x19	; 25
    1136:	91 05       	cpc	r25, r1
    1138:	0c f4       	brge	.+2      	; 0x113c <enterpass+0x330>
    113a:	0d cf       	rjmp	.-486    	; 0xf56 <enterpass+0x14a>
		 buzzeron();
	 _delay_ms(100);
	 buzzeroff();
	 _delay_ms(100);
	 }
	 redoff();
    113c:	0e 94 d6 05 	call	0xbac	; 0xbac <redoff>
	 LCD_clearScreen();
    1140:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_clearScreen>
	 LCD_displayStringRowColumn(0,0,"Enter Password");
    1144:	24 e6       	ldi	r18, 0x64	; 100
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
	 check=checkpass();
    1152:	0e 94 09 06 	call	0xc12	; 0xc12 <checkpass>
    1156:	8d a7       	std	Y+45, r24	; 0x2d
	LCD_displayStringRowColumn(0,0,"Enter Password");
	uint8 check =0;
	check=checkpass();
	_delay_ms(500);

	while(!check)
    1158:	8d a5       	ldd	r24, Y+45	; 0x2d
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <enterpass+0x354>
    115e:	e6 ce       	rjmp	.-564    	; 0xf2c <enterpass+0x120>
	 LCD_clearScreen();
	 LCD_displayStringRowColumn(0,0,"Enter Password");
	 check=checkpass();
 }

	LCD_clearScreen();
    1160:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_clearScreen>
    LCD_displayStringRowColumn(0,0,"System is ON :)");
    1164:	22 e9       	ldi	r18, 0x92	; 146
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1,2,"Welcome");
    1172:	22 ea       	ldi	r18, 0xA2	; 162
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	62 e0       	ldi	r22, 0x02	; 2
    117a:	a9 01       	movw	r20, r18
    117c:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_displayStringRowColumn>
    greenon();
    1180:	0e 94 e7 05 	call	0xbce	; 0xbce <greenon>
}
    1184:	ad 96       	adiw	r28, 0x2d	; 45
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <pinMode>:

void pinMode(uint8 reg_n, uint8 pin, uint8 state) {
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	27 97       	sbiw	r28, 0x07	; 7
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    11ac:	6c 83       	std	Y+4, r22	; 0x04
    11ae:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8 *reg = &DDRA;
    11b0:	8a e3       	ldi	r24, 0x3A	; 58
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
	switch (reg_n) {
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3f 83       	std	Y+7, r19	; 0x07
    11c0:	2e 83       	std	Y+6, r18	; 0x06
    11c2:	8e 81       	ldd	r24, Y+6	; 0x06
    11c4:	9f 81       	ldd	r25, Y+7	; 0x07
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	81 f0       	breq	.+32     	; 0x11ec <pinMode+0x56>
    11cc:	2e 81       	ldd	r18, Y+6	; 0x06
    11ce:	3f 81       	ldd	r19, Y+7	; 0x07
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	cc f0       	brlt	.+50     	; 0x1208 <pinMode+0x72>
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	9f 81       	ldd	r25, Y+7	; 0x07
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 05       	cpc	r25, r1
    11de:	59 f0       	breq	.+22     	; 0x11f6 <pinMode+0x60>
    11e0:	2e 81       	ldd	r18, Y+6	; 0x06
    11e2:	3f 81       	ldd	r19, Y+7	; 0x07
    11e4:	23 30       	cpi	r18, 0x03	; 3
    11e6:	31 05       	cpc	r19, r1
    11e8:	59 f0       	breq	.+22     	; 0x1200 <pinMode+0x6a>
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <pinMode+0x72>
	case 0:
		break;
	case 1:
		reg = &DDRB;
    11ec:	87 e3       	ldi	r24, 0x37	; 55
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <pinMode+0x72>
		break;
	case 2:
		reg = &DDRC;
    11f6:	84 e3       	ldi	r24, 0x34	; 52
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <pinMode+0x72>
		break;
	case 3:
		reg = &DDRD;
    1200:	81 e3       	ldi	r24, 0x31	; 49
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (state)
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	88 23       	and	r24, r24
    120c:	a1 f0       	breq	.+40     	; 0x1236 <pinMode+0xa0>
		setBit((*reg), pin);
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <pinMode+0x92>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <pinMode+0x8e>
    122c:	84 2b       	or	r24, r20
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	14 c0       	rjmp	.+40     	; 0x125e <pinMode+0xc8>
	else
		resetBit((*reg), pin);
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <pinMode+0xba>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <pinMode+0xb6>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	80 83       	st	Z, r24
}
    125e:	27 96       	adiw	r28, 0x07	; 7
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <digitalWrite>:

void digitalWrite(uint8 reg_n, uint8 pin, uint8 value) {
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	27 97       	sbiw	r28, 0x07	; 7
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	6c 83       	std	Y+4, r22	; 0x04
    1288:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8 *reg = &PORTA;
    128a:	8b e3       	ldi	r24, 0x3B	; 59
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
	switch (reg_n) {
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3f 83       	std	Y+7, r19	; 0x07
    129a:	2e 83       	std	Y+6, r18	; 0x06
    129c:	8e 81       	ldd	r24, Y+6	; 0x06
    129e:	9f 81       	ldd	r25, Y+7	; 0x07
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <digitalWrite+0x56>
    12a6:	2e 81       	ldd	r18, Y+6	; 0x06
    12a8:	3f 81       	ldd	r19, Y+7	; 0x07
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	cc f0       	brlt	.+50     	; 0x12e2 <digitalWrite+0x72>
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	9f 81       	ldd	r25, Y+7	; 0x07
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	59 f0       	breq	.+22     	; 0x12d0 <digitalWrite+0x60>
    12ba:	2e 81       	ldd	r18, Y+6	; 0x06
    12bc:	3f 81       	ldd	r19, Y+7	; 0x07
    12be:	23 30       	cpi	r18, 0x03	; 3
    12c0:	31 05       	cpc	r19, r1
    12c2:	59 f0       	breq	.+22     	; 0x12da <digitalWrite+0x6a>
    12c4:	0e c0       	rjmp	.+28     	; 0x12e2 <digitalWrite+0x72>
	case 0:
		break;
	case 1:
		reg = &PORTB;
    12c6:	88 e3       	ldi	r24, 0x38	; 56
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <digitalWrite+0x72>
		break;
	case 2:
		reg = &PORTC;
    12d0:	85 e3       	ldi	r24, 0x35	; 53
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <digitalWrite+0x72>
		break;
	case 3:
		reg = &PORTD;
    12da:	82 e3       	ldi	r24, 0x32	; 50
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (value)
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	88 23       	and	r24, r24
    12e6:	a1 f0       	breq	.+40     	; 0x1310 <digitalWrite+0xa0>
		setBit((*reg), pin);
    12e8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ea:	fa 81       	ldd	r31, Y+2	; 0x02
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <digitalWrite+0x92>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <digitalWrite+0x8e>
    1306:	84 2b       	or	r24, r20
    1308:	e9 81       	ldd	r30, Y+1	; 0x01
    130a:	fa 81       	ldd	r31, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <digitalWrite+0xc8>
	else
		resetBit((*reg), pin);
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <digitalWrite+0xba>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <digitalWrite+0xb6>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	e9 81       	ldd	r30, Y+1	; 0x01
    1334:	fa 81       	ldd	r31, Y+2	; 0x02
    1336:	80 83       	st	Z, r24
}
    1338:	27 96       	adiw	r28, 0x07	; 7
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <pullupPin>:

void pullupPin(uint8 reg_n, uint8 pin) {
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <pullupPin+0x6>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	6a 83       	std	Y+2, r22	; 0x02
	digitalWrite(reg_n, pin, 1);
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	6a 81       	ldd	r22, Y+2	; 0x02
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 38 09 	call	0x1270	; 0x1270 <digitalWrite>
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <digitalRead>:

uint8 digitalRead(uint8 reg_n, uint8 pin) {
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <digitalRead+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <digitalRead+0x8>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <digitalRead+0xa>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8b 83       	std	Y+3, r24	; 0x03
    137c:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8 *reg = &PINA;
    137e:	89 e3       	ldi	r24, 0x39	; 57
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
	switch (reg_n) {
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	91 05       	cpc	r25, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <digitalRead+0x4e>
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	cc f0       	brlt	.+50     	; 0x13d6 <digitalRead+0x6a>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	91 05       	cpc	r25, r1
    13ac:	59 f0       	breq	.+22     	; 0x13c4 <digitalRead+0x58>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	23 30       	cpi	r18, 0x03	; 3
    13b4:	31 05       	cpc	r19, r1
    13b6:	59 f0       	breq	.+22     	; 0x13ce <digitalRead+0x62>
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <digitalRead+0x6a>
	case 0:
		break;
	case 1:
		reg = &PINB;
    13ba:	86 e3       	ldi	r24, 0x36	; 54
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <digitalRead+0x6a>
		break;
	case 2:
		reg = &PINC;
    13c4:	83 e3       	ldi	r24, 0x33	; 51
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <digitalRead+0x6a>
		break;
	case 3:
		reg = &PIND;
    13ce:	80 e3       	ldi	r24, 0x30	; 48
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return (*reg) & (1 << pin);
    13d6:	e9 81       	ldd	r30, Y+1	; 0x01
    13d8:	fa 81       	ldd	r31, Y+2	; 0x02
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <digitalRead+0x84>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <digitalRead+0x80>
    13f4:	84 23       	and	r24, r20
}
    13f6:	26 96       	adiw	r28, 0x06	; 6
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <system_init>:
void system_init(void){
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
//----------------------------------------------------------

pinMode(greenLed, OUTPUT);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	67 e0       	ldi	r22, 0x07	; 7
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 cb 08 	call	0x1196	; 0x1196 <pinMode>
pinMode(redLed, OUTPUT);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	66 e0       	ldi	r22, 0x06	; 6
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	0e 94 cb 08 	call	0x1196	; 0x1196 <pinMode>
pinMode(buzzer, OUTPUT);
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	67 e0       	ldi	r22, 0x07	; 7
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 cb 08 	call	0x1196	; 0x1196 <pinMode>
pinMode(motor, OUTPUT);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	63 e0       	ldi	r22, 0x03	; 3
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	0e 94 cb 08 	call	0x1196	; 0x1196 <pinMode>

digitalWrite(motor, LOW);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	63 e0       	ldi	r22, 0x03	; 3
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 38 09 	call	0x1270	; 0x1270 <digitalWrite>

//----------------------------------------------------------
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <ADC_init>:
#include <avr/io.h>
#include "adc.h"

void ADC_init() {
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= (1 << REFS0);  // Set reference voltage to AVCC
    1450:	a7 e2       	ldi	r26, 0x27	; 39
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e7 e2       	ldi	r30, 0x27	; 39
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 64       	ori	r24, 0x40	; 64
    145c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);  // Enable ADC
    145e:	a6 e2       	ldi	r26, 0x26	; 38
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e6 e2       	ldi	r30, 0x26	; 38
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 68       	ori	r24, 0x80	; 128
    146a:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128
    146c:	a6 e2       	ldi	r26, 0x26	; 38
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e6 e2       	ldi	r30, 0x26	; 38
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	87 60       	ori	r24, 0x07	; 7
    1478:	8c 93       	st	X, r24
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <ADR_readChannel>:

uint16 ADR_readChannel(uint8 channel_n) {
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xF0) | (channel_n & 0x0F);  // Select ADC channel
    148c:	a7 e2       	ldi	r26, 0x27	; 39
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e7 e2       	ldi	r30, 0x27	; 39
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	98 2f       	mov	r25, r24
    1498:	90 7f       	andi	r25, 0xF0	; 240
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	8f 70       	andi	r24, 0x0F	; 15
    149e:	89 2b       	or	r24, r25
    14a0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);  // Start ADC conversion
    14a2:	a6 e2       	ldi	r26, 0x26	; 38
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e6 e2       	ldi	r30, 0x26	; 38
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	8c 93       	st	X, r24
	while (ADCSRA & (1 << ADSC));  // Wait for conversion to complete
    14b0:	e6 e2       	ldi	r30, 0x26	; 38
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	80 74       	andi	r24, 0x40	; 64
    14bc:	90 70       	andi	r25, 0x00	; 0
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	b9 f7       	brne	.-18     	; 0x14b0 <ADR_readChannel+0x30>
	return ADC;  // Return ADC result
    14c2:	e4 e2       	ldi	r30, 0x24	; 36
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
}
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <GPIO_setupPinDirection+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <GPIO_setupPinDirection+0x8>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	6a 83       	std	Y+2, r22	; 0x02
    14e4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	88 30       	cpi	r24, 0x08	; 8
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <GPIO_setupPinDirection+0x1c>
    14ec:	d5 c0       	rjmp	.+426    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <GPIO_setupPinDirection+0x24>
    14f4:	d1 c0       	rjmp	.+418    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3d 83       	std	Y+5, r19	; 0x05
    14fe:	2c 83       	std	Y+4, r18	; 0x04
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <GPIO_setupPinDirection+0x3a>
    150a:	43 c0       	rjmp	.+134    	; 0x1592 <GPIO_setupPinDirection+0xc0>
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <GPIO_setupPinDirection+0x4e>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	71 f0       	breq	.+28     	; 0x153a <GPIO_setupPinDirection+0x68>
    151e:	bc c0       	rjmp	.+376    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
    1520:	2c 81       	ldd	r18, Y+4	; 0x04
    1522:	3d 81       	ldd	r19, Y+5	; 0x05
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <GPIO_setupPinDirection+0x5a>
    152a:	5f c0       	rjmp	.+190    	; 0x15ea <GPIO_setupPinDirection+0x118>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <GPIO_setupPinDirection+0x66>
    1536:	85 c0       	rjmp	.+266    	; 0x1642 <GPIO_setupPinDirection+0x170>
    1538:	af c0       	rjmp	.+350    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	a1 f4       	brne	.+40     	; 0x1568 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1540:	aa e3       	ldi	r26, 0x3A	; 58
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GPIO_setupPinDirection+0x8c>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <GPIO_setupPinDirection+0x88>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	98 c0       	rjmp	.+304    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <GPIO_setupPinDirection+0xb4>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <GPIO_setupPinDirection+0xb0>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	83 c0       	rjmp	.+262    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1598:	a7 e3       	ldi	r26, 0x37	; 55
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_setupPinDirection+0xe4>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_setupPinDirection+0xe0>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	6c c0       	rjmp	.+216    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15c0:	a7 e3       	ldi	r26, 0x37	; 55
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e7 e3       	ldi	r30, 0x37	; 55
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <GPIO_setupPinDirection+0x10c>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <GPIO_setupPinDirection+0x108>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	57 c0       	rjmp	.+174    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15f0:	a4 e3       	ldi	r26, 0x34	; 52
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e4 e3       	ldi	r30, 0x34	; 52
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_setupPinDirection+0x13c>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_setupPinDirection+0x138>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	40 c0       	rjmp	.+128    	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1618:	a4 e3       	ldi	r26, 0x34	; 52
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_setupPinDirection+0x164>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_setupPinDirection+0x160>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	2b c0       	rjmp	.+86     	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	a1 f4       	brne	.+40     	; 0x1670 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1648:	a1 e3       	ldi	r26, 0x31	; 49
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e1 e3       	ldi	r30, 0x31	; 49
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <GPIO_setupPinDirection+0x194>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <GPIO_setupPinDirection+0x190>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1670:	a1 e3       	ldi	r26, 0x31	; 49
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e1 e3       	ldi	r30, 0x31	; 49
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <GPIO_setupPinDirection+0x1bc>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <GPIO_setupPinDirection+0x1b8>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <GPIO_writePin+0x6>
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <GPIO_writePin+0x8>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	6a 83       	std	Y+2, r22	; 0x02
    16ba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	88 30       	cpi	r24, 0x08	; 8
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <GPIO_writePin+0x1c>
    16c2:	d5 c0       	rjmp	.+426    	; 0x186e <GPIO_writePin+0x1c6>
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <GPIO_writePin+0x24>
    16ca:	d1 c0       	rjmp	.+418    	; 0x186e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	3d 83       	std	Y+5, r19	; 0x05
    16d4:	2c 83       	std	Y+4, r18	; 0x04
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	9d 81       	ldd	r25, Y+5	; 0x05
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <GPIO_writePin+0x3a>
    16e0:	43 c0       	rjmp	.+134    	; 0x1768 <GPIO_writePin+0xc0>
    16e2:	2c 81       	ldd	r18, Y+4	; 0x04
    16e4:	3d 81       	ldd	r19, Y+5	; 0x05
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <GPIO_writePin+0x4e>
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	71 f0       	breq	.+28     	; 0x1710 <GPIO_writePin+0x68>
    16f4:	bc c0       	rjmp	.+376    	; 0x186e <GPIO_writePin+0x1c6>
    16f6:	2c 81       	ldd	r18, Y+4	; 0x04
    16f8:	3d 81       	ldd	r19, Y+5	; 0x05
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <GPIO_writePin+0x5a>
    1700:	5f c0       	rjmp	.+190    	; 0x17c0 <GPIO_writePin+0x118>
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <GPIO_writePin+0x66>
    170c:	85 c0       	rjmp	.+266    	; 0x1818 <GPIO_writePin+0x170>
    170e:	af c0       	rjmp	.+350    	; 0x186e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	a1 f4       	brne	.+40     	; 0x173e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1716:	ab e3       	ldi	r26, 0x3B	; 59
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	eb e3       	ldi	r30, 0x3B	; 59
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_writePin+0x8c>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_writePin+0x88>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	98 c0       	rjmp	.+304    	; 0x186e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    173e:	ab e3       	ldi	r26, 0x3B	; 59
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	eb e3       	ldi	r30, 0x3B	; 59
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <GPIO_writePin+0xb4>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <GPIO_writePin+0xb0>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	83 c0       	rjmp	.+262    	; 0x186e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	a1 f4       	brne	.+40     	; 0x1796 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    176e:	a8 e3       	ldi	r26, 0x38	; 56
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e8 e3       	ldi	r30, 0x38	; 56
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_writePin+0xe4>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_writePin+0xe0>
    1790:	84 2b       	or	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	6c c0       	rjmp	.+216    	; 0x186e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1796:	a8 e3       	ldi	r26, 0x38	; 56
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e8 e3       	ldi	r30, 0x38	; 56
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <GPIO_writePin+0x10c>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <GPIO_writePin+0x108>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	57 c0       	rjmp	.+174    	; 0x186e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17c6:	a5 e3       	ldi	r26, 0x35	; 53
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_writePin+0x13c>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_writePin+0x138>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	40 c0       	rjmp	.+128    	; 0x186e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17ee:	a5 e3       	ldi	r26, 0x35	; 53
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_writePin+0x164>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_writePin+0x160>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	2b c0       	rjmp	.+86     	; 0x186e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	a1 f4       	brne	.+40     	; 0x1846 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    181e:	a2 e3       	ldi	r26, 0x32	; 50
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_writePin+0x194>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_writePin+0x190>
    1840:	84 2b       	or	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	14 c0       	rjmp	.+40     	; 0x186e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1846:	a2 e3       	ldi	r26, 0x32	; 50
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e2 e3       	ldi	r30, 0x32	; 50
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <GPIO_writePin+0x1bc>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <GPIO_writePin+0x1b8>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPIO_readPin+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <GPIO_readPin+0x8>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	8a 83       	std	Y+2, r24	; 0x02
    188e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1890:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	08 f0       	brcs	.+2      	; 0x189a <GPIO_readPin+0x1c>
    1898:	84 c0       	rjmp	.+264    	; 0x19a2 <GPIO_readPin+0x124>
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	08 f0       	brcs	.+2      	; 0x18a2 <GPIO_readPin+0x24>
    18a0:	80 c0       	rjmp	.+256    	; 0x19a2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3d 83       	std	Y+5, r19	; 0x05
    18aa:	2c 83       	std	Y+4, r18	; 0x04
    18ac:	4c 81       	ldd	r20, Y+4	; 0x04
    18ae:	5d 81       	ldd	r21, Y+5	; 0x05
    18b0:	41 30       	cpi	r20, 0x01	; 1
    18b2:	51 05       	cpc	r21, r1
    18b4:	79 f1       	breq	.+94     	; 0x1914 <GPIO_readPin+0x96>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	91 05       	cpc	r25, r1
    18be:	34 f4       	brge	.+12     	; 0x18cc <GPIO_readPin+0x4e>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	69 f0       	breq	.+26     	; 0x18e4 <GPIO_readPin+0x66>
    18ca:	6b c0       	rjmp	.+214    	; 0x19a2 <GPIO_readPin+0x124>
    18cc:	4c 81       	ldd	r20, Y+4	; 0x04
    18ce:	5d 81       	ldd	r21, Y+5	; 0x05
    18d0:	42 30       	cpi	r20, 0x02	; 2
    18d2:	51 05       	cpc	r21, r1
    18d4:	b9 f1       	breq	.+110    	; 0x1944 <GPIO_readPin+0xc6>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <GPIO_readPin+0x64>
    18e0:	49 c0       	rjmp	.+146    	; 0x1974 <GPIO_readPin+0xf6>
    18e2:	5f c0       	rjmp	.+190    	; 0x19a2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18e4:	e9 e3       	ldi	r30, 0x39	; 57
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a9 01       	movw	r20, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <GPIO_readPin+0x7e>
    18f8:	55 95       	asr	r21
    18fa:	47 95       	ror	r20
    18fc:	8a 95       	dec	r24
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <GPIO_readPin+0x7a>
    1900:	ca 01       	movw	r24, r20
    1902:	81 70       	andi	r24, 0x01	; 1
    1904:	90 70       	andi	r25, 0x00	; 0
    1906:	88 23       	and	r24, r24
    1908:	19 f0       	breq	.+6      	; 0x1910 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	49 c0       	rjmp	.+146    	; 0x19a2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	47 c0       	rjmp	.+142    	; 0x19a2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1914:	e6 e3       	ldi	r30, 0x36	; 54
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_readPin+0xae>
    1928:	55 95       	asr	r21
    192a:	47 95       	ror	r20
    192c:	8a 95       	dec	r24
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_readPin+0xaa>
    1930:	ca 01       	movw	r24, r20
    1932:	81 70       	andi	r24, 0x01	; 1
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	88 23       	and	r24, r24
    1938:	19 f0       	breq	.+6      	; 0x1940 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	31 c0       	rjmp	.+98     	; 0x19a2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	2f c0       	rjmp	.+94     	; 0x19a2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1944:	e3 e3       	ldi	r30, 0x33	; 51
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a9 01       	movw	r20, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <GPIO_readPin+0xde>
    1958:	55 95       	asr	r21
    195a:	47 95       	ror	r20
    195c:	8a 95       	dec	r24
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <GPIO_readPin+0xda>
    1960:	ca 01       	movw	r24, r20
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	88 23       	and	r24, r24
    1968:	19 f0       	breq	.+6      	; 0x1970 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	19 c0       	rjmp	.+50     	; 0x19a2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1970:	19 82       	std	Y+1, r1	; 0x01
    1972:	17 c0       	rjmp	.+46     	; 0x19a2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1974:	e0 e3       	ldi	r30, 0x30	; 48
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a9 01       	movw	r20, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_readPin+0x10e>
    1988:	55 95       	asr	r21
    198a:	47 95       	ror	r20
    198c:	8a 95       	dec	r24
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_readPin+0x10a>
    1990:	ca 01       	movw	r24, r20
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	90 70       	andi	r25, 0x00	; 0
    1996:	88 23       	and	r24, r24
    1998:	19 f0       	breq	.+6      	; 0x19a0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19a0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <GPIO_setupPortDirection+0x6>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <GPIO_setupPortDirection+0x8>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	90 f5       	brcc	.+100    	; 0x1a2e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3c 83       	std	Y+4, r19	; 0x04
    19d2:	2b 83       	std	Y+3, r18	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	91 05       	cpc	r25, r1
    19dc:	d1 f0       	breq	.+52     	; 0x1a12 <GPIO_setupPortDirection+0x5e>
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <GPIO_setupPortDirection+0x3e>
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	61 f0       	breq	.+24     	; 0x1a08 <GPIO_setupPortDirection+0x54>
    19f0:	1e c0       	rjmp	.+60     	; 0x1a2e <GPIO_setupPortDirection+0x7a>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <GPIO_setupPortDirection+0x68>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	81 f0       	breq	.+32     	; 0x1a26 <GPIO_setupPortDirection+0x72>
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a08:	ea e3       	ldi	r30, 0x3A	; 58
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a12:	e7 e3       	ldi	r30, 0x37	; 55
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	80 83       	st	Z, r24
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a1c:	e4 e3       	ldi	r30, 0x34	; 52
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 83       	st	Z, r24
    1a24:	04 c0       	rjmp	.+8      	; 0x1a2e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a26:	e1 e3       	ldi	r30, 0x31	; 49
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <GPIO_writePort+0x6>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <GPIO_writePort+0x8>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	90 f5       	brcc	.+100    	; 0x1ab6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3c 83       	std	Y+4, r19	; 0x04
    1a5a:	2b 83       	std	Y+3, r18	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	d1 f0       	breq	.+52     	; 0x1a9a <GPIO_writePort+0x5e>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <GPIO_writePort+0x3e>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	61 f0       	breq	.+24     	; 0x1a90 <GPIO_writePort+0x54>
    1a78:	1e c0       	rjmp	.+60     	; 0x1ab6 <GPIO_writePort+0x7a>
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <GPIO_writePort+0x68>
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	81 f0       	breq	.+32     	; 0x1aae <GPIO_writePort+0x72>
    1a8e:	13 c0       	rjmp	.+38     	; 0x1ab6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a90:	eb e3       	ldi	r30, 0x3B	; 59
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 83       	st	Z, r24
    1a98:	0e c0       	rjmp	.+28     	; 0x1ab6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a9a:	e8 e3       	ldi	r30, 0x38	; 56
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	80 83       	st	Z, r24
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1aa4:	e5 e3       	ldi	r30, 0x35	; 53
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	80 83       	st	Z, r24
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aae:	e2 e3       	ldi	r30, 0x32	; 50
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <GPIO_readPort+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <GPIO_readPort+0x8>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ad2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	90 f5       	brcc	.+100    	; 0x1b3e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3c 83       	std	Y+4, r19	; 0x04
    1ae2:	2b 83       	std	Y+3, r18	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	91 05       	cpc	r25, r1
    1aec:	d1 f0       	breq	.+52     	; 0x1b22 <GPIO_readPort+0x5e>
    1aee:	2b 81       	ldd	r18, Y+3	; 0x03
    1af0:	3c 81       	ldd	r19, Y+4	; 0x04
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <GPIO_readPort+0x3e>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	61 f0       	breq	.+24     	; 0x1b18 <GPIO_readPort+0x54>
    1b00:	1e c0       	rjmp	.+60     	; 0x1b3e <GPIO_readPort+0x7a>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	81 f0       	breq	.+32     	; 0x1b2c <GPIO_readPort+0x68>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	91 05       	cpc	r25, r1
    1b14:	81 f0       	breq	.+32     	; 0x1b36 <GPIO_readPort+0x72>
    1b16:	13 c0       	rjmp	.+38     	; 0x1b3e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b18:	e9 e3       	ldi	r30, 0x39	; 57
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	0e c0       	rjmp	.+28     	; 0x1b3e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b22:	e6 e3       	ldi	r30, 0x36	; 54
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b2c:	e3 e3       	ldi	r30, 0x33	; 51
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b36:	e0 e3       	ldi	r30, 0x30	; 48
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <KEYPAD_is_off>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void KEYPAD_is_off(void){
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	62 97       	sbiw	r28, 0x12	; 18
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row,test,i=0;
    1b62:	1f 86       	std	Y+15, r1	; 0x0f
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>

		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	64 e0       	ldi	r22, 0x04	; 4
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	65 e0       	ldi	r22, 0x05	; 5
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	66 e0       	ldi	r22, 0x06	; 6
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
    1baa:	ab c0       	rjmp	.+342    	; 0x1d02 <KEYPAD_is_off+0x1b4>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(i<3)//check 3 times to make sure key pad is off
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a8 ec       	ldi	r26, 0xC8	; 200
    1bb2:	b2 e4       	ldi	r27, 0x42	; 66
    1bb4:	8b 87       	std	Y+11, r24	; 0x0b
    1bb6:	9c 87       	std	Y+12, r25	; 0x0c
    1bb8:	ad 87       	std	Y+13, r26	; 0x0d
    1bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a e7       	ldi	r20, 0x7A	; 122
    1bca:	53 e4       	ldi	r21, 0x43	; 67
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8f 83       	std	Y+7, r24	; 0x07
    1bd6:	98 87       	std	Y+8, r25	; 0x08
    1bd8:	a9 87       	std	Y+9, r26	; 0x09
    1bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <KEYPAD_is_off+0xb0>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <KEYPAD_is_off+0x12e>
	else if (__tmp > 65535)
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <KEYPAD_is_off+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <KEYPAD_is_off+0x110>
    1c40:	89 e1       	ldi	r24, 0x19	; 25
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <KEYPAD_is_off+0xfe>
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <KEYPAD_is_off+0xf2>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <KEYPAD_is_off+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <KEYPAD_is_off+0x13a>
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
		{_delay_ms(100);
			for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c90:	19 8a       	std	Y+17, r1	; 0x11
    1c92:	31 c0       	rjmp	.+98     	; 0x1cf6 <KEYPAD_is_off+0x1a8>
			{ test=1;//assuming that it is off from the start
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	88 8b       	std	Y+16, r24	; 0x10
				/*
				 * Each time setup the direction for all keypad port as input pins,
				 * except this row will be output pin
				 */
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	69 89       	ldd	r22, Y+17	; 0x11
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	69 89       	ldd	r22, Y+17	; 0x11
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>

				for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1cac:	1a 8a       	std	Y+18, r1	; 0x12
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <KEYPAD_is_off+0x18a>
				{
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1cb0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	9c 5f       	subi	r25, 0xFC	; 252
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	69 2f       	mov	r22, r25
    1cba:	0e 94 3f 0c 	call	0x187e	; 0x187e <GPIO_readPin>
    1cbe:	88 23       	and	r24, r24
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <KEYPAD_is_off+0x184>
					{
						test=0;//it is on
    1cc2:	18 8a       	std	Y+16, r1	; 0x10
						i=0;//start over
    1cc4:	1f 86       	std	Y+15, r1	; 0x0f
						GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	69 89       	ldd	r22, Y+17	; 0x11
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <KEYPAD_is_off+0x190>
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

				for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1cd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	8a 8b       	std	Y+18, r24	; 0x12
    1cd8:	8a 89       	ldd	r24, Y+18	; 0x12
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	48 f3       	brcs	.-46     	; 0x1cb0 <KEYPAD_is_off+0x162>
						i=0;//start over
						GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
						break;
					}
				}
				if(!test)row=0;//start over
    1cde:	88 89       	ldd	r24, Y+16	; 0x10
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <KEYPAD_is_off+0x198>
    1ce4:	19 8a       	std	Y+17, r1	; 0x11
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	69 89       	ldd	r22, Y+17	; 0x11
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(i<3)//check 3 times to make sure key pad is off
		{_delay_ms(100);
			for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cf0:	89 89       	ldd	r24, Y+17	; 0x11
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
    1cf6:	89 89       	ldd	r24, Y+17	; 0x11
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	60 f2       	brcs	.-104    	; 0x1c94 <KEYPAD_is_off+0x146>
					}
				}
				if(!test)row=0;//start over
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			}
			i++;
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(i<3)//check 3 times to make sure key pad is off
    1d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <KEYPAD_is_off+0x1bc>
    1d08:	51 cf       	rjmp	.-350    	; 0x1bac <KEYPAD_is_off+0x5e>
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			}
			i++;
		}

}
    1d0a:	62 96       	adiw	r28, 0x12	; 18
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey(void)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <KEYPAD_getPressedKey+0x6>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	63 e0       	ldi	r22, 0x03	; 3
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	64 e0       	ldi	r22, 0x04	; 4
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	65 e0       	ldi	r22, 0x05	; 5
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	66 e0       	ldi	r22, 0x06	; 6
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d6c:	19 82       	std	Y+1, r1	; 0x01
    1d6e:	36 c0       	rjmp	.+108    	; 0x1ddc <KEYPAD_getPressedKey+0xc0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	69 81       	ldd	r22, Y+1	; 0x01
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	69 81       	ldd	r22, Y+1	; 0x01
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d84:	1a 82       	std	Y+2, r1	; 0x02
    1d86:	1f c0       	rjmp	.+62     	; 0x1dc6 <KEYPAD_getPressedKey+0xaa>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	9c 5f       	subi	r25, 0xFC	; 252
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	69 2f       	mov	r22, r25
    1d92:	0e 94 3f 0c 	call	0x187e	; 0x187e <GPIO_readPin>
    1d96:	88 23       	and	r24, r24
    1d98:	99 f4       	brne	.+38     	; 0x1dc0 <KEYPAD_getPressedKey+0xa4>
				{
					#if (KEYPAD_NUM_COLS == 3)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	c9 01       	movw	r24, r18
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	82 0f       	add	r24, r18
    1da8:	93 1f       	adc	r25, r19
    1daa:	98 2f       	mov	r25, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	89 0f       	add	r24, r25
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <KEYPAD_4x3_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	83 30       	cpi	r24, 0x03	; 3
    1dca:	f0 f2       	brcs	.-68     	; 0x1d88 <KEYPAD_getPressedKey+0x6c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	69 81       	ldd	r22, Y+1	; 0x01
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	84 30       	cpi	r24, 0x04	; 4
    1de0:	38 f2       	brcs	.-114    	; 0x1d70 <KEYPAD_getPressedKey+0x54>
    1de2:	c4 cf       	rjmp	.-120    	; 0x1d6c <KEYPAD_getPressedKey+0x50>

00001de4 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <KEYPAD_4x3_adjustKeyNumber+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <KEYPAD_4x3_adjustKeyNumber+0x8>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1df2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	3c 83       	std	Y+4, r19	; 0x04
    1dfc:	2b 83       	std	Y+3, r18	; 0x03
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	8a 30       	cpi	r24, 0x0A	; 10
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <KEYPAD_4x3_adjustKeyNumber+0x44>
    1e08:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0c:	2a 30       	cpi	r18, 0x0A	; 10
    1e0e:	31 05       	cpc	r19, r1
    1e10:	9c f0       	brlt	.+38     	; 0x1e38 <KEYPAD_4x3_adjustKeyNumber+0x54>
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	8b 30       	cpi	r24, 0x0B	; 11
    1e18:	91 05       	cpc	r25, r1
    1e1a:	49 f0       	breq	.+18     	; 0x1e2e <KEYPAD_4x3_adjustKeyNumber+0x4a>
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	2c 30       	cpi	r18, 0x0C	; 12
    1e22:	31 05       	cpc	r19, r1
    1e24:	31 f0       	breq	.+12     	; 0x1e32 <KEYPAD_4x3_adjustKeyNumber+0x4e>
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
		case 10: keypad_button = '*'; // ASCII Code of *
    1e28:	8a e2       	ldi	r24, 0x2A	; 42
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	07 c0       	rjmp	.+14     	; 0x1e3c <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		case 11: keypad_button = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;		
		case 12: keypad_button = '#'; // ASCII Code of #
    1e32:	83 e2       	ldi	r24, 0x23	; 35
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		default: keypad_button = button_number;
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	2e 97       	sbiw	r28, 0x0e	; 14
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	62 e0       	ldi	r22, 0x02	; 2
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	63 e0       	ldi	r22, 0x03	; 3
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	6f ef       	ldi	r22, 0xFF	; 255
    1e78:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <GPIO_setupPortDirection>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 ea       	ldi	r26, 0xA0	; 160
    1e82:	b1 e4       	ldi	r27, 0x41	; 65
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a e7       	ldi	r20, 0x7A	; 122
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <LCD_init+0x82>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <LCD_init+0x100>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <LCD_init+0xe2>
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_init+0xd0>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <LCD_init+0xc4>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_init+0x10c>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f60:	88 e3       	ldi	r24, 0x38	; 56
    1f62:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f66:	8c e0       	ldi	r24, 0x0C	; 12
    1f68:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    1f72:	2e 96       	adiw	r28, 0x0e	; 14
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	e9 97       	sbiw	r28, 0x39	; 57
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e8       	ldi	r26, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	8d ab       	std	Y+53, r24	; 0x35
    1fae:	9e ab       	std	Y+54, r25	; 0x36
    1fb0:	af ab       	std	Y+55, r26	; 0x37
    1fb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fba:	98 ad       	ldd	r25, Y+56	; 0x38
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	53 e4       	ldi	r21, 0x43	; 67
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	89 ab       	std	Y+49, r24	; 0x31
    1fce:	9a ab       	std	Y+50, r25	; 0x32
    1fd0:	ab ab       	std	Y+51, r26	; 0x33
    1fd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fda:	9c a9       	ldd	r25, Y+52	; 0x34
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_sendCommand+0x72>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	98 ab       	std	Y+48, r25	; 0x30
    1ff2:	8f a7       	std	Y+47, r24	; 0x2f
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	6d a9       	ldd	r22, Y+53	; 0x35
    2010:	7e a9       	ldd	r23, Y+54	; 0x36
    2012:	8f a9       	ldd	r24, Y+55	; 0x37
    2014:	98 ad       	ldd	r25, Y+56	; 0x38
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	98 ab       	std	Y+48, r25	; 0x30
    2034:	8f a7       	std	Y+47, r24	; 0x2f
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_sendCommand+0xd2>
    2038:	89 e1       	ldi	r24, 0x19	; 25
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e a7       	std	Y+46, r25	; 0x2e
    203e:	8d a7       	std	Y+45, r24	; 0x2d
    2040:	8d a5       	ldd	r24, Y+45	; 0x2d
    2042:	9e a5       	ldd	r25, Y+46	; 0x2e
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_sendCommand+0xc0>
    2048:	9e a7       	std	Y+46, r25	; 0x2e
    204a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8f a5       	ldd	r24, Y+47	; 0x2f
    204e:	98 a9       	ldd	r25, Y+48	; 0x30
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	98 ab       	std	Y+48, r25	; 0x30
    2054:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8f a5       	ldd	r24, Y+47	; 0x2f
    2058:	98 a9       	ldd	r25, Y+48	; 0x30
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_sendCommand+0xb4>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	69 a9       	ldd	r22, Y+49	; 0x31
    2062:	7a a9       	ldd	r23, Y+50	; 0x32
    2064:	8b a9       	ldd	r24, Y+51	; 0x33
    2066:	9c a9       	ldd	r25, Y+52	; 0x34
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	98 ab       	std	Y+48, r25	; 0x30
    2072:	8f a7       	std	Y+47, r24	; 0x2f
    2074:	8f a5       	ldd	r24, Y+47	; 0x2f
    2076:	98 a9       	ldd	r25, Y+48	; 0x30
    2078:	9c a7       	std	Y+44, r25	; 0x2c
    207a:	8b a7       	std	Y+43, r24	; 0x2b
    207c:	8b a5       	ldd	r24, Y+43	; 0x2b
    207e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_sendCommand+0xfc>
    2084:	9c a7       	std	Y+44, r25	; 0x2c
    2086:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	63 e0       	ldi	r22, 0x03	; 3
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e8       	ldi	r26, 0x80	; 128
    2098:	bf e3       	ldi	r27, 0x3F	; 63
    209a:	8f a3       	std	Y+39, r24	; 0x27
    209c:	98 a7       	std	Y+40, r25	; 0x28
    209e:	a9 a7       	std	Y+41, r26	; 0x29
    20a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6f a1       	ldd	r22, Y+39	; 0x27
    20a4:	78 a5       	ldd	r23, Y+40	; 0x28
    20a6:	89 a5       	ldd	r24, Y+41	; 0x29
    20a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a e7       	ldi	r20, 0x7A	; 122
    20b0:	53 e4       	ldi	r21, 0x43	; 67
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8b a3       	std	Y+35, r24	; 0x23
    20bc:	9c a3       	std	Y+36, r25	; 0x24
    20be:	ad a3       	std	Y+37, r26	; 0x25
    20c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20c2:	6b a1       	ldd	r22, Y+35	; 0x23
    20c4:	7c a1       	ldd	r23, Y+36	; 0x24
    20c6:	8d a1       	ldd	r24, Y+37	; 0x25
    20c8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_sendCommand+0x160>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9a a3       	std	Y+34, r25	; 0x22
    20e0:	89 a3       	std	Y+33, r24	; 0x21
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20e4:	6b a1       	ldd	r22, Y+35	; 0x23
    20e6:	7c a1       	ldd	r23, Y+36	; 0x24
    20e8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ea:	9e a1       	ldd	r25, Y+38	; 0x26
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6f a1       	ldd	r22, Y+39	; 0x27
    20fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2100:	89 a5       	ldd	r24, Y+41	; 0x29
    2102:	9a a5       	ldd	r25, Y+42	; 0x2a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9a a3       	std	Y+34, r25	; 0x22
    2122:	89 a3       	std	Y+33, r24	; 0x21
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_sendCommand+0x1c0>
    2126:	89 e1       	ldi	r24, 0x19	; 25
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	98 a3       	std	Y+32, r25	; 0x20
    212c:	8f 8f       	std	Y+31, r24	; 0x1f
    212e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2130:	98 a1       	ldd	r25, Y+32	; 0x20
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_sendCommand+0x1ae>
    2136:	98 a3       	std	Y+32, r25	; 0x20
    2138:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	89 a1       	ldd	r24, Y+33	; 0x21
    213c:	9a a1       	ldd	r25, Y+34	; 0x22
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9a a3       	std	Y+34, r25	; 0x22
    2142:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	89 a1       	ldd	r24, Y+33	; 0x21
    2146:	9a a1       	ldd	r25, Y+34	; 0x22
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_sendCommand+0x1a2>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6b a1       	ldd	r22, Y+35	; 0x23
    2150:	7c a1       	ldd	r23, Y+36	; 0x24
    2152:	8d a1       	ldd	r24, Y+37	; 0x25
    2154:	9e a1       	ldd	r25, Y+38	; 0x26
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
    2162:	89 a1       	ldd	r24, Y+33	; 0x21
    2164:	9a a1       	ldd	r25, Y+34	; 0x22
    2166:	9e 8f       	std	Y+30, r25	; 0x1e
    2168:	8d 8f       	std	Y+29, r24	; 0x1d
    216a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    216c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_sendCommand+0x1ea>
    2172:	9e 8f       	std	Y+30, r25	; 0x1e
    2174:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	69 ad       	ldd	r22, Y+57	; 0x39
    217a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <GPIO_writePort>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a0 e8       	ldi	r26, 0x80	; 128
    2184:	bf e3       	ldi	r27, 0x3F	; 63
    2186:	89 8f       	std	Y+25, r24	; 0x19
    2188:	9a 8f       	std	Y+26, r25	; 0x1a
    218a:	ab 8f       	std	Y+27, r26	; 0x1b
    218c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218e:	69 8d       	ldd	r22, Y+25	; 0x19
    2190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4a e7       	ldi	r20, 0x7A	; 122
    219c:	53 e4       	ldi	r21, 0x43	; 67
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	8d 8b       	std	Y+21, r24	; 0x15
    21a8:	9e 8b       	std	Y+22, r25	; 0x16
    21aa:	af 8b       	std	Y+23, r26	; 0x17
    21ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <LCD_sendCommand+0x24c>
		__ticks = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 8b       	std	Y+20, r25	; 0x14
    21cc:	8b 8b       	std	Y+19, r24	; 0x13
    21ce:	3f c0       	rjmp	.+126    	; 0x224e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    21d0:	6d 89       	ldd	r22, Y+21	; 0x15
    21d2:	7e 89       	ldd	r23, Y+22	; 0x16
    21d4:	8f 89       	ldd	r24, Y+23	; 0x17
    21d6:	98 8d       	ldd	r25, Y+24	; 0x18
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	4c f5       	brge	.+82     	; 0x223a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	51 e4       	ldi	r21, 0x41	; 65
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9c 8b       	std	Y+20, r25	; 0x14
    220e:	8b 8b       	std	Y+19, r24	; 0x13
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <LCD_sendCommand+0x2ac>
    2212:	89 e1       	ldi	r24, 0x19	; 25
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9a 8b       	std	Y+18, r25	; 0x12
    2218:	89 8b       	std	Y+17, r24	; 0x11
    221a:	89 89       	ldd	r24, Y+17	; 0x11
    221c:	9a 89       	ldd	r25, Y+18	; 0x12
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_sendCommand+0x29a>
    2222:	9a 8b       	std	Y+18, r25	; 0x12
    2224:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	8b 89       	ldd	r24, Y+19	; 0x13
    2228:	9c 89       	ldd	r25, Y+20	; 0x14
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	9c 8b       	std	Y+20, r25	; 0x14
    222e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	8b 89       	ldd	r24, Y+19	; 0x13
    2232:	9c 89       	ldd	r25, Y+20	; 0x14
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	69 f7       	brne	.-38     	; 0x2212 <LCD_sendCommand+0x28e>
    2238:	14 c0       	rjmp	.+40     	; 0x2262 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	98 8b       	std	Y+16, r25	; 0x10
    2254:	8f 87       	std	Y+15, r24	; 0x0f
    2256:	8f 85       	ldd	r24, Y+15	; 0x0f
    2258:	98 89       	ldd	r25, Y+16	; 0x10
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_sendCommand+0x2d6>
    225e:	98 8b       	std	Y+16, r25	; 0x10
    2260:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	63 e0       	ldi	r22, 0x03	; 3
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	a0 e8       	ldi	r26, 0x80	; 128
    2272:	bf e3       	ldi	r27, 0x3F	; 63
    2274:	8b 87       	std	Y+11, r24	; 0x0b
    2276:	9c 87       	std	Y+12, r25	; 0x0c
    2278:	ad 87       	std	Y+13, r26	; 0x0d
    227a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e7       	ldi	r20, 0x7A	; 122
    228a:	53 e4       	ldi	r21, 0x43	; 67
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8f 83       	std	Y+7, r24	; 0x07
    2296:	98 87       	std	Y+8, r25	; 0x08
    2298:	a9 87       	std	Y+9, r26	; 0x09
    229a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	5f e3       	ldi	r21, 0x3F	; 63
    22ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	2c f4       	brge	.+10     	; 0x22be <LCD_sendCommand+0x33a>
		__ticks = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	3f ef       	ldi	r19, 0xFF	; 255
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	57 e4       	ldi	r21, 0x47	; 71
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	4c f5       	brge	.+82     	; 0x2328 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22da:	8d 85       	ldd	r24, Y+13	; 0x0d
    22dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <LCD_sendCommand+0x39a>
    2300:	89 e1       	ldi	r24, 0x19	; 25
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_sendCommand+0x388>
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	69 f7       	brne	.-38     	; 0x2300 <LCD_sendCommand+0x37c>
    2326:	14 c0       	rjmp	.+40     	; 0x2350 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <LCD_sendCommand+0x3c4>
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2350:	e9 96       	adiw	r28, 0x39	; 57
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	e9 97       	sbiw	r28, 0x39	; 57
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	62 e0       	ldi	r22, 0x02	; 2
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e8       	ldi	r26, 0x80	; 128
    2388:	bf e3       	ldi	r27, 0x3F	; 63
    238a:	8d ab       	std	Y+53, r24	; 0x35
    238c:	9e ab       	std	Y+54, r25	; 0x36
    238e:	af ab       	std	Y+55, r26	; 0x37
    2390:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6d a9       	ldd	r22, Y+53	; 0x35
    2394:	7e a9       	ldd	r23, Y+54	; 0x36
    2396:	8f a9       	ldd	r24, Y+55	; 0x37
    2398:	98 ad       	ldd	r25, Y+56	; 0x38
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	53 e4       	ldi	r21, 0x43	; 67
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	89 ab       	std	Y+49, r24	; 0x31
    23ac:	9a ab       	std	Y+50, r25	; 0x32
    23ae:	ab ab       	std	Y+51, r26	; 0x33
    23b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b2:	69 a9       	ldd	r22, Y+49	; 0x31
    23b4:	7a a9       	ldd	r23, Y+50	; 0x32
    23b6:	8b a9       	ldd	r24, Y+51	; 0x33
    23b8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_displayCharacter+0x72>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	98 ab       	std	Y+48, r25	; 0x30
    23d0:	8f a7       	std	Y+47, r24	; 0x2f
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23d4:	69 a9       	ldd	r22, Y+49	; 0x31
    23d6:	7a a9       	ldd	r23, Y+50	; 0x32
    23d8:	8b a9       	ldd	r24, Y+51	; 0x33
    23da:	9c a9       	ldd	r25, Y+52	; 0x34
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	6d a9       	ldd	r22, Y+53	; 0x35
    23ee:	7e a9       	ldd	r23, Y+54	; 0x36
    23f0:	8f a9       	ldd	r24, Y+55	; 0x37
    23f2:	98 ad       	ldd	r25, Y+56	; 0x38
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	98 ab       	std	Y+48, r25	; 0x30
    2412:	8f a7       	std	Y+47, r24	; 0x2f
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_displayCharacter+0xd2>
    2416:	89 e1       	ldi	r24, 0x19	; 25
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9e a7       	std	Y+46, r25	; 0x2e
    241c:	8d a7       	std	Y+45, r24	; 0x2d
    241e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2420:	9e a5       	ldd	r25, Y+46	; 0x2e
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_displayCharacter+0xc0>
    2426:	9e a7       	std	Y+46, r25	; 0x2e
    2428:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8f a5       	ldd	r24, Y+47	; 0x2f
    242c:	98 a9       	ldd	r25, Y+48	; 0x30
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8f a5       	ldd	r24, Y+47	; 0x2f
    2436:	98 a9       	ldd	r25, Y+48	; 0x30
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_displayCharacter+0xb4>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	69 a9       	ldd	r22, Y+49	; 0x31
    2440:	7a a9       	ldd	r23, Y+50	; 0x32
    2442:	8b a9       	ldd	r24, Y+51	; 0x33
    2444:	9c a9       	ldd	r25, Y+52	; 0x34
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
    2452:	8f a5       	ldd	r24, Y+47	; 0x2f
    2454:	98 a9       	ldd	r25, Y+48	; 0x30
    2456:	9c a7       	std	Y+44, r25	; 0x2c
    2458:	8b a7       	std	Y+43, r24	; 0x2b
    245a:	8b a5       	ldd	r24, Y+43	; 0x2b
    245c:	9c a5       	ldd	r25, Y+44	; 0x2c
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_displayCharacter+0xfc>
    2462:	9c a7       	std	Y+44, r25	; 0x2c
    2464:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	63 e0       	ldi	r22, 0x03	; 3
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e8       	ldi	r26, 0x80	; 128
    2476:	bf e3       	ldi	r27, 0x3F	; 63
    2478:	8f a3       	std	Y+39, r24	; 0x27
    247a:	98 a7       	std	Y+40, r25	; 0x28
    247c:	a9 a7       	std	Y+41, r26	; 0x29
    247e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	6f a1       	ldd	r22, Y+39	; 0x27
    2482:	78 a5       	ldd	r23, Y+40	; 0x28
    2484:	89 a5       	ldd	r24, Y+41	; 0x29
    2486:	9a a5       	ldd	r25, Y+42	; 0x2a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	53 e4       	ldi	r21, 0x43	; 67
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8b a3       	std	Y+35, r24	; 0x23
    249a:	9c a3       	std	Y+36, r25	; 0x24
    249c:	ad a3       	std	Y+37, r26	; 0x25
    249e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a0:	6b a1       	ldd	r22, Y+35	; 0x23
    24a2:	7c a1       	ldd	r23, Y+36	; 0x24
    24a4:	8d a1       	ldd	r24, Y+37	; 0x25
    24a6:	9e a1       	ldd	r25, Y+38	; 0x26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9a a3       	std	Y+34, r25	; 0x22
    24be:	89 a3       	std	Y+33, r24	; 0x21
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	8d a1       	ldd	r24, Y+37	; 0x25
    24c8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	6f a1       	ldd	r22, Y+39	; 0x27
    24dc:	78 a5       	ldd	r23, Y+40	; 0x28
    24de:	89 a5       	ldd	r24, Y+41	; 0x29
    24e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9a a3       	std	Y+34, r25	; 0x22
    2500:	89 a3       	std	Y+33, r24	; 0x21
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <LCD_displayCharacter+0x1c0>
    2504:	89 e1       	ldi	r24, 0x19	; 25
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	98 a3       	std	Y+32, r25	; 0x20
    250a:	8f 8f       	std	Y+31, r24	; 0x1f
    250c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250e:	98 a1       	ldd	r25, Y+32	; 0x20
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_displayCharacter+0x1ae>
    2514:	98 a3       	std	Y+32, r25	; 0x20
    2516:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	89 a1       	ldd	r24, Y+33	; 0x21
    2524:	9a a1       	ldd	r25, Y+34	; 0x22
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <LCD_displayCharacter+0x1a2>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
    2540:	89 a1       	ldd	r24, Y+33	; 0x21
    2542:	9a a1       	ldd	r25, Y+34	; 0x22
    2544:	9e 8f       	std	Y+30, r25	; 0x1e
    2546:	8d 8f       	std	Y+29, r24	; 0x1d
    2548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_displayCharacter+0x1ea>
    2550:	9e 8f       	std	Y+30, r25	; 0x1e
    2552:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	69 ad       	ldd	r22, Y+57	; 0x39
    2558:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <GPIO_writePort>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 e8       	ldi	r26, 0x80	; 128
    2562:	bf e3       	ldi	r27, 0x3F	; 63
    2564:	89 8f       	std	Y+25, r24	; 0x19
    2566:	9a 8f       	std	Y+26, r25	; 0x1a
    2568:	ab 8f       	std	Y+27, r26	; 0x1b
    256a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	69 8d       	ldd	r22, Y+25	; 0x19
    256e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a e7       	ldi	r20, 0x7A	; 122
    257a:	53 e4       	ldi	r21, 0x43	; 67
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8d 8b       	std	Y+21, r24	; 0x15
    2586:	9e 8b       	std	Y+22, r25	; 0x16
    2588:	af 8b       	std	Y+23, r26	; 0x17
    258a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    258c:	6d 89       	ldd	r22, Y+21	; 0x15
    258e:	7e 89       	ldd	r23, Y+22	; 0x16
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <LCD_displayCharacter+0x24c>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
    25ac:	3f c0       	rjmp	.+126    	; 0x262c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    25ae:	6d 89       	ldd	r22, Y+21	; 0x15
    25b0:	7e 89       	ldd	r23, Y+22	; 0x16
    25b2:	8f 89       	ldd	r24, Y+23	; 0x17
    25b4:	98 8d       	ldd	r25, Y+24	; 0x18
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	4c f5       	brge	.+82     	; 0x2618 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	69 8d       	ldd	r22, Y+25	; 0x19
    25c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <LCD_displayCharacter+0x2ac>
    25f0:	89 e1       	ldi	r24, 0x19	; 25
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9a 8b       	std	Y+18, r25	; 0x12
    25f6:	89 8b       	std	Y+17, r24	; 0x11
    25f8:	89 89       	ldd	r24, Y+17	; 0x11
    25fa:	9a 89       	ldd	r25, Y+18	; 0x12
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_displayCharacter+0x29a>
    2600:	9a 8b       	std	Y+18, r25	; 0x12
    2602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8b 89       	ldd	r24, Y+19	; 0x13
    2606:	9c 89       	ldd	r25, Y+20	; 0x14
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <LCD_displayCharacter+0x28e>
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9c 8b       	std	Y+20, r25	; 0x14
    262a:	8b 8b       	std	Y+19, r24	; 0x13
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	98 8b       	std	Y+16, r25	; 0x10
    2632:	8f 87       	std	Y+15, r24	; 0x0f
    2634:	8f 85       	ldd	r24, Y+15	; 0x0f
    2636:	98 89       	ldd	r25, Y+16	; 0x10
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_displayCharacter+0x2d6>
    263c:	98 8b       	std	Y+16, r25	; 0x10
    263e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <GPIO_writePin>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	a0 e8       	ldi	r26, 0x80	; 128
    2650:	bf e3       	ldi	r27, 0x3F	; 63
    2652:	8b 87       	std	Y+11, r24	; 0x0b
    2654:	9c 87       	std	Y+12, r25	; 0x0c
    2656:	ad 87       	std	Y+13, r26	; 0x0d
    2658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265a:	6b 85       	ldd	r22, Y+11	; 0x0b
    265c:	7c 85       	ldd	r23, Y+12	; 0x0c
    265e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2660:	9e 85       	ldd	r25, Y+14	; 0x0e
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a e7       	ldi	r20, 0x7A	; 122
    2668:	53 e4       	ldi	r21, 0x43	; 67
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8f 83       	std	Y+7, r24	; 0x07
    2674:	98 87       	std	Y+8, r25	; 0x08
    2676:	a9 87       	std	Y+9, r26	; 0x09
    2678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268e:	88 23       	and	r24, r24
    2690:	2c f4       	brge	.+10     	; 0x269c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	3f c0       	rjmp	.+126    	; 0x271a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    269c:	6f 81       	ldd	r22, Y+7	; 0x07
    269e:	78 85       	ldd	r23, Y+8	; 0x08
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	3f ef       	ldi	r19, 0xFF	; 255
    26a8:	4f e7       	ldi	r20, 0x7F	; 127
    26aa:	57 e4       	ldi	r21, 0x47	; 71
    26ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b0:	18 16       	cp	r1, r24
    26b2:	4c f5       	brge	.+82     	; 0x2706 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9e 83       	std	Y+6, r25	; 0x06
    26da:	8d 83       	std	Y+5, r24	; 0x05
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <LCD_displayCharacter+0x39a>
    26de:	89 e1       	ldi	r24, 0x19	; 25
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	8b 83       	std	Y+3, r24	; 0x03
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_displayCharacter+0x388>
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	69 f7       	brne	.-38     	; 0x26de <LCD_displayCharacter+0x37c>
    2704:	14 c0       	rjmp	.+40     	; 0x272e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_displayCharacter+0x3c4>
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    272e:	e9 96       	adiw	r28, 0x39	; 57
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_displayString+0x6>
    2746:	0f 92       	push	r0
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	0e c0       	rjmp	.+28     	; 0x2770 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	9b 81       	ldd	r25, Y+3	; 0x03
    275e:	fc 01       	movw	r30, r24
    2760:	e2 0f       	add	r30, r18
    2762:	f3 1f       	adc	r31, r19
    2764:	80 81       	ld	r24, Z
    2766:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_displayCharacter>
		i++;
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	9b 81       	ldd	r25, Y+3	; 0x03
    277a:	fc 01       	movw	r30, r24
    277c:	e2 0f       	add	r30, r18
    277e:	f3 1f       	adc	r31, r19
    2780:	80 81       	ld	r24, Z
    2782:	88 23       	and	r24, r24
    2784:	39 f7       	brne	.-50     	; 0x2754 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	00 d0       	rcall	.+0      	; 0x2798 <LCD_moveCursor+0x6>
    2798:	00 d0       	rcall	.+0      	; 0x279a <LCD_moveCursor+0x8>
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	8a 83       	std	Y+2, r24	; 0x02
    27a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	3d 83       	std	Y+5, r19	; 0x05
    27ac:	2c 83       	std	Y+4, r18	; 0x04
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	9d 81       	ldd	r25, Y+5	; 0x05
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	91 05       	cpc	r25, r1
    27b6:	c1 f0       	breq	.+48     	; 0x27e8 <LCD_moveCursor+0x56>
    27b8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ba:	3d 81       	ldd	r19, Y+5	; 0x05
    27bc:	22 30       	cpi	r18, 0x02	; 2
    27be:	31 05       	cpc	r19, r1
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_moveCursor+0x3a>
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	61 f0       	breq	.+24     	; 0x27e2 <LCD_moveCursor+0x50>
    27ca:	19 c0       	rjmp	.+50     	; 0x27fe <LCD_moveCursor+0x6c>
    27cc:	2c 81       	ldd	r18, Y+4	; 0x04
    27ce:	3d 81       	ldd	r19, Y+5	; 0x05
    27d0:	22 30       	cpi	r18, 0x02	; 2
    27d2:	31 05       	cpc	r19, r1
    27d4:	69 f0       	breq	.+26     	; 0x27f0 <LCD_moveCursor+0x5e>
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
    27d8:	9d 81       	ldd	r25, Y+5	; 0x05
    27da:	83 30       	cpi	r24, 0x03	; 3
    27dc:	91 05       	cpc	r25, r1
    27de:	61 f0       	breq	.+24     	; 0x27f8 <LCD_moveCursor+0x66>
    27e0:	0e c0       	rjmp	.+28     	; 0x27fe <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	0b c0       	rjmp	.+22     	; 0x27fe <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	80 5c       	subi	r24, 0xC0	; 192
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	07 c0       	rjmp	.+14     	; 0x27fe <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	80 5f       	subi	r24, 0xF0	; 240
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	80 5b       	subi	r24, 0xB0	; 176
    27fc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	80 68       	ori	r24, 0x80	; 128
    2802:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <LCD_displayStringRowColumn+0x6>
    281c:	00 d0       	rcall	.+0      	; 0x281e <LCD_displayStringRowColumn+0x8>
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	6a 83       	std	Y+2, r22	; 0x02
    2826:	5c 83       	std	Y+4, r21	; 0x04
    2828:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	6a 81       	ldd	r22, Y+2	; 0x02
    282e:	0e 94 c9 13 	call	0x2792	; 0x2792 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_displayString>
}
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	62 97       	sbiw	r28, 0x12	; 18
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	9a 8b       	std	Y+18, r25	; 0x12
    285e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2860:	89 89       	ldd	r24, Y+17	; 0x11
    2862:	9a 89       	ldd	r25, Y+18	; 0x12
    2864:	9e 01       	movw	r18, r28
    2866:	2f 5f       	subi	r18, 0xFF	; 255
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	b9 01       	movw	r22, r18
    286c:	4a e0       	ldi	r20, 0x0A	; 10
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	0e 94 a6 14 	call	0x294c	; 0x294c <itoa>
   LCD_displayString(buff); /* Display the string */
    2874:	ce 01       	movw	r24, r28
    2876:	01 96       	adiw	r24, 0x01	; 1
    2878:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_displayString>
}
    287c:	62 96       	adiw	r28, 0x12	; 18
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <main>:
#include "Function.h"
#include <avr/interrupt.h>
#include <string.h>


int main (){
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	//----------------------------------------------------------
		//ENAPLE INTERRUPT
		setBit(GICR, 5);   //ENABLE INT2
    28aa:	ab e5       	ldi	r26, 0x5B	; 91
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e5       	ldi	r30, 0x5B	; 91
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	80 62       	ori	r24, 0x20	; 32
    28b6:	8c 93       	st	X, r24
		setBit(MCUCSR, 6); //SET INT2 TO RISING EDGE
    28b8:	a4 e5       	ldi	r26, 0x54	; 84
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e4 e5       	ldi	r30, 0x54	; 84
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	80 64       	ori	r24, 0x40	; 64
    28c4:	8c 93       	st	X, r24
		sei();             // SERG 7 ENABLE INTERRUPTS
    28c6:	78 94       	sei

		//----------------------------------------------------------
		ADC_init();
    28c8:	0e 94 24 0a 	call	0x1448	; 0x1448 <ADC_init>
		system_init();
    28cc:	0e 94 04 0a 	call	0x1408	; 0x1408 <system_init>
enterpass();
    28d0:	0e 94 06 07 	call	0xe0c	; 0xe0c <enterpass>
 return 0;
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <__prologue_saves__>:
    28de:	2f 92       	push	r2
    28e0:	3f 92       	push	r3
    28e2:	4f 92       	push	r4
    28e4:	5f 92       	push	r5
    28e6:	6f 92       	push	r6
    28e8:	7f 92       	push	r7
    28ea:	8f 92       	push	r8
    28ec:	9f 92       	push	r9
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	ca 1b       	sub	r28, r26
    2908:	db 0b       	sbc	r29, r27
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	09 94       	ijmp

00002916 <__epilogue_restores__>:
    2916:	2a 88       	ldd	r2, Y+18	; 0x12
    2918:	39 88       	ldd	r3, Y+17	; 0x11
    291a:	48 88       	ldd	r4, Y+16	; 0x10
    291c:	5f 84       	ldd	r5, Y+15	; 0x0f
    291e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2920:	7d 84       	ldd	r7, Y+13	; 0x0d
    2922:	8c 84       	ldd	r8, Y+12	; 0x0c
    2924:	9b 84       	ldd	r9, Y+11	; 0x0b
    2926:	aa 84       	ldd	r10, Y+10	; 0x0a
    2928:	b9 84       	ldd	r11, Y+9	; 0x09
    292a:	c8 84       	ldd	r12, Y+8	; 0x08
    292c:	df 80       	ldd	r13, Y+7	; 0x07
    292e:	ee 80       	ldd	r14, Y+6	; 0x06
    2930:	fd 80       	ldd	r15, Y+5	; 0x05
    2932:	0c 81       	ldd	r16, Y+4	; 0x04
    2934:	1b 81       	ldd	r17, Y+3	; 0x03
    2936:	aa 81       	ldd	r26, Y+2	; 0x02
    2938:	b9 81       	ldd	r27, Y+1	; 0x01
    293a:	ce 0f       	add	r28, r30
    293c:	d1 1d       	adc	r29, r1
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	ed 01       	movw	r28, r26
    294a:	08 95       	ret

0000294c <itoa>:
    294c:	fb 01       	movw	r30, r22
    294e:	9f 01       	movw	r18, r30
    2950:	e8 94       	clt
    2952:	42 30       	cpi	r20, 0x02	; 2
    2954:	c4 f0       	brlt	.+48     	; 0x2986 <itoa+0x3a>
    2956:	45 32       	cpi	r20, 0x25	; 37
    2958:	b4 f4       	brge	.+44     	; 0x2986 <itoa+0x3a>
    295a:	4a 30       	cpi	r20, 0x0A	; 10
    295c:	29 f4       	brne	.+10     	; 0x2968 <itoa+0x1c>
    295e:	97 fb       	bst	r25, 7
    2960:	1e f4       	brtc	.+6      	; 0x2968 <itoa+0x1c>
    2962:	90 95       	com	r25
    2964:	81 95       	neg	r24
    2966:	9f 4f       	sbci	r25, 0xFF	; 255
    2968:	64 2f       	mov	r22, r20
    296a:	77 27       	eor	r23, r23
    296c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    2970:	80 5d       	subi	r24, 0xD0	; 208
    2972:	8a 33       	cpi	r24, 0x3A	; 58
    2974:	0c f0       	brlt	.+2      	; 0x2978 <itoa+0x2c>
    2976:	89 5d       	subi	r24, 0xD9	; 217
    2978:	81 93       	st	Z+, r24
    297a:	cb 01       	movw	r24, r22
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	a1 f7       	brne	.-24     	; 0x2968 <itoa+0x1c>
    2980:	16 f4       	brtc	.+4      	; 0x2986 <itoa+0x3a>
    2982:	5d e2       	ldi	r21, 0x2D	; 45
    2984:	51 93       	st	Z+, r21
    2986:	10 82       	st	Z, r1
    2988:	c9 01       	movw	r24, r18
    298a:	0c 94 c7 14 	jmp	0x298e	; 0x298e <strrev>

0000298e <strrev>:
    298e:	dc 01       	movw	r26, r24
    2990:	fc 01       	movw	r30, r24
    2992:	67 2f       	mov	r22, r23
    2994:	71 91       	ld	r23, Z+
    2996:	77 23       	and	r23, r23
    2998:	e1 f7       	brne	.-8      	; 0x2992 <strrev+0x4>
    299a:	32 97       	sbiw	r30, 0x02	; 2
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <strrev+0x18>
    299e:	7c 91       	ld	r23, X
    29a0:	6d 93       	st	X+, r22
    29a2:	70 83       	st	Z, r23
    29a4:	62 91       	ld	r22, -Z
    29a6:	ae 17       	cp	r26, r30
    29a8:	bf 07       	cpc	r27, r31
    29aa:	c8 f3       	brcs	.-14     	; 0x299e <strrev+0x10>
    29ac:	08 95       	ret

000029ae <__udivmodhi4>:
    29ae:	aa 1b       	sub	r26, r26
    29b0:	bb 1b       	sub	r27, r27
    29b2:	51 e1       	ldi	r21, 0x11	; 17
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <__udivmodhi4_ep>

000029b6 <__udivmodhi4_loop>:
    29b6:	aa 1f       	adc	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	a6 17       	cp	r26, r22
    29bc:	b7 07       	cpc	r27, r23
    29be:	10 f0       	brcs	.+4      	; 0x29c4 <__udivmodhi4_ep>
    29c0:	a6 1b       	sub	r26, r22
    29c2:	b7 0b       	sbc	r27, r23

000029c4 <__udivmodhi4_ep>:
    29c4:	88 1f       	adc	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	5a 95       	dec	r21
    29ca:	a9 f7       	brne	.-22     	; 0x29b6 <__udivmodhi4_loop>
    29cc:	80 95       	com	r24
    29ce:	90 95       	com	r25
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	08 95       	ret

000029d6 <_exit>:
    29d6:	f8 94       	cli

000029d8 <__stop_program>:
    29d8:	ff cf       	rjmp	.-2      	; 0x29d8 <__stop_program>
